const queryString = window.location.search;
const urlParams = new URLSearchParams(queryString);
let selectedDate = (urlParams.get('date')) 
    ? new Date(urlParams.get('date') + 'T00:00:00') 
    : new Date();
selectedDate.setHours(0, 0, 0, 0); 

document.addEventListener('DOMContentLoaded', function () {
    const currentDateButton = document.getElementById("currentDate");
    const prevDayButton = document.getElementById("prevDay");
    const nextDayButton = document.getElementById("nextDay");
    const bookingTableBody = document.getElementById("booking-table-body");
    const infoBox = document.getElementById("info-box");
    const selectedDateSpan = document.getElementById("selected-date");
    const selectedTimeSpan = document.getElementById("selected-time");
    const selectedHoursSpan = document.getElementById("selected-hours");
    const clearButton = document.getElementById("clear-button");
    const selectedPriceSpan = document.getElementById("selected-price");
    const submitButton = document.getElementById("submit-button");
    const startTimeSelect = document.getElementById("start-time");
    const endTimeSelect = document.getElementById("endtime");

    let servicePrice = 0;


    document.getElementById("searchFreeDate").addEventListener('click', function () {
        updateDateButton();
        renderBookingTable();
    }
)



    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    fetch('../php/getServicePrice.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                servicePrice = parseFloat(data.price);
                console.log("Service Price per Hour:", servicePrice);
            } else {
                console.error("Error fetching service price:", data.message);
            }
        })
        .catch(error => console.error("Error fetching service price:", error));

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô Flatpickr
    const flatpickrInstance = flatpickr(currentDateButton, {
        dateFormat: "Y-m-d", // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ô‡∏≤‡∏ó‡∏µ,
        defaultDate: selectedDate,
        onChange: function (selectedDates) {
            if (selectedDates.length > 0) {
                selectedDate = selectedDates[0];
                selectedDate.setHours(0, 0, 0, 0);
                updateDateButton();
                renderBookingTable();
            }
        }
    });

    function updateDateButton() {
        const formattedDate = selectedDate.toLocaleDateString("th-TH", {
            weekday: "long",
            year: "numeric",
            month: "long",
            day: "numeric"
        });
        currentDateButton.textContent = formattedDate;
        flatpickrInstance.setDate(selectedDate);
    }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≠‡∏á
function renderBookingTable() {
    bookingTableBody.innerHTML = '';
    let availableCourtsCount = 0; // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ
    let closedCourtsCount = 0; // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î

    fetch('../php/get_court_details.php')
        .then(response => response.json())
        .then(courts => {
            courts.forEach(court => {
                if (court.CourtID === 0) return; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ CourtID ‡πÄ‡∏õ‡πá‡∏ô 0

                const openTime = parseInt(court.OpenTime.split(':')[0], 10);
                const closeTime = parseInt(court.CloseTime.split(':')[0], 10) || 24; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô 00:00 ‡πÄ‡∏õ‡πá‡∏ô 24
                const totalSlots = closeTime - openTime;
                const maxSlots = 13; // ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å 11:00 ‡∏ñ‡∏∂‡∏á 00:00

                let row = `<tr><td>${court.CourtName}</td>`;

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏° 1-4 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ï‡πá‡∏°
                if (court.CourtStatus == 0) {
                    closedCourtsCount++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î
                    for (let j = 0; j < maxSlots; j++) {
                        row += '<td class="unavailable" style="background-color: gray; color: black; text-align: center;">‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏î</td>';
                    }
                } else {
                    availableCourtsCount++; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î
                    for (let j = 0; j < maxSlots; j++) {
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        if (j < totalSlots && (openTime + j) >= 11 && (openTime + j) < closeTime) {
                            row += `<td class="available" data-court="${court.CourtID}" data-time="${openTime + j}:00 - ${openTime + j + 1}:00"></td>`;
                        } else {
                            row += '<td class="unavailable" style="background-color: gray; color: black; text-align: center;">‡∏™‡∏ô‡∏≤‡∏°‡∏õ‡∏¥‡∏î</td>';
                        }
                    }
                }

                row += '</tr>';
                bookingTableBody.innerHTML += row;
            });

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
            fetchBookedSlots(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß

            // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î
            console.log(`Total Courts: ${courts.length}`);
            console.log(`Available Courts: ${availableCourtsCount}`);
            console.log(`Closed Courts: ${closedCourtsCount}`);

            // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô UI (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö)
            const infoBox = document.getElementById("info-box");
            infoBox.textContent = `‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${courts.length} ‡∏™‡∏ô‡∏≤‡∏°: ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ ${availableCourtsCount} ‡∏™‡∏ô‡∏≤‡∏°, ‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î ${closedCourtsCount} ‡∏™‡∏ô‡∏≤‡∏°`;
        })
        .catch(error => {
            console.error('Error fetching court details:', error);
        });
}

 // Fetch booked slots and update the table
 function fetchBookedSlots() {
    fetch('../php/getBookedSlotsAll.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ date: selectedDate.toLocaleDateString("sv-SE") })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const availableCourts = {}; // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î

            // ‡∏´‡∏≤ court ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
            document.querySelectorAll(".available[data-court]").forEach(cell => {
                const courtId = cell.dataset.court;
                if (!availableCourts[courtId]) {
                    availableCourts[courtId] = true;
                }
            });

            data.bookedSlots.forEach(slot => {
                const startTime = parseInt(slot.startTime.split(':')[0], 10);  // ‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô 10
                const endTime = parseInt(slot.endTime.split(':')[0], 10);  // ‡πÉ‡∏ä‡πâ‡∏ê‡∏≤‡∏ô 10

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å startTime ‡∏ñ‡∏∂‡∏á endTime
                for (let hour = startTime; hour < endTime; hour++) {
                    const formattedTime = `${hour}:00 - ${hour + 1}:00`;

                    let cell = document.querySelector(`.available[data-court="${slot.court}"][data-time="${formattedTime}"]`);

                    // üìå ‡∏ñ‡πâ‡∏≤‡∏™‡∏ô‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏õ‡∏¥‡∏î ‡πÉ‡∏´‡πâ‡∏´‡∏≤ "‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
                    if (!cell && (slot.status === '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô' || slot.status === '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')) {
                        let moved = false;
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                        for (let courtId in availableCourts) {
                            const newCell = document.querySelector(`.available[data-court="${courtId}"][data-time="${formattedTime}"]`);
                            if (newCell) {
                                cell = newCell;
                                slot.court = courtId; // ‡∏¢‡πâ‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏õ‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                                moved = true;
                                break;
                            }
                        }

                        // ‡∏ñ‡πâ‡∏≤‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
                        if (!moved) {
                            return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
                        }
                    }

                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏ã‡∏•‡∏•‡πå (‡∏™‡∏ô‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á)
                    if (cell) {
                        cell.classList.remove('available');
                        
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
                        if (slot.status === '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡πä‡∏ß‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' || slot.status === '‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') {
                            cell.classList.add('booked');
                            cell.textContent = "‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß";
                            cell.style.backgroundColor = "red";
                        } else if (slot.status === '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô') {
                            cell.classList.add('pending');
                            cell.textContent = "‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô";
                            cell.style.backgroundColor = "orange";
                        } else if (slot.status === '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥') {
                            cell.classList.add('pending-approval');
                            cell.textContent = "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥";
                            cell.style.backgroundColor = "#34e1eb"; // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
                        } else if (slot.status === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') {
                            cell.classList.add('available');
                        }
                    }
                }
            });
        } else {
            console.error("Failed to fetch booked slots: ", data.message);
        }
    })
    .catch(error => {
        console.error('Error fetching booked slots:', error);
    });
}



    prevDayButton.addEventListener("click", function () {
        selectedDate.setDate(selectedDate.getDate() - 1);
        updateDateButton();
        renderBookingTable();
    });

// ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ maxAdvanceDays ‡∏à‡∏≤‡∏Å data-* attribute
const maxAdvanceDaysElement = document.getElementById('booking-settings');
const maxAdvanceDays = maxAdvanceDaysElement ? parseInt(maxAdvanceDaysElement.getAttribute('data-max-advance-days')) : 0;

console.log(maxAdvanceDays);  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô JavaScript

const today = new Date(); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ nextDayButton ‡πÅ‡∏•‡∏∞ selectedDate ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if (typeof nextDayButton !== 'undefined' && nextDayButton !== null && selectedDate) {
    nextDayButton.addEventListener("click", function () {
        let tempDate = new Date(selectedDate);
        tempDate.setDate(tempDate.getDate() + 1);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const maxAllowedDate = new Date(today);
        maxAllowedDate.setDate(today.getDate() + maxAdvanceDays);  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ tempDate ‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (tempDate <= maxAllowedDate) {
            selectedDate = tempDate;
            updateDateButton();
            renderBookingTable();
        } else {
            // ‡πÉ‡∏ä‡πâ SweetAlert ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ alert() ‡∏õ‡∏Å‡∏ï‡∏¥
            Swal.fire({
                icon: 'warning',
                title: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏ô ' + maxAdvanceDays + ' ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ',
                text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            });
        }
    });
} else {
    console.error('nextDayButton ‡∏´‡∏£‡∏∑‡∏≠ selectedDate ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
}

    
    function updateInfoBox() {
        const startTime = startTimeSelect.value;
        const endTime = endTimeSelect.value;

        if (!startTime || !endTime) {
            selectedDateSpan.textContent = "";
            selectedTimeSpan.textContent = "";
            selectedHoursSpan.textContent = "";
            selectedPriceSpan.textContent = "";
            return;
        }

        const formattedDate = selectedDate.toLocaleDateString("th-TH", {
            year: "numeric",
            month: "2-digit",
            day: "2-digit"
        });

        const startTimeDate = new Date(`1970-01-01T${startTime}:00`);
        const endTimeDate = new Date(`1970-01-01T${endTime}:00`);
        const hours = (endTimeDate - startTimeDate) / (1000 * 60 * 60);

        if (hours <= 0) {
            // Show SweetAlert when hours are not valid
            Swal.fire({
                icon: 'error',
                title: '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
                text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            }).then(() => {
                // Clear the fields after the user confirms the SweetAlert
                startTimeSelect.value = "";
                endTimeSelect.value = "";
                selectedDateSpan.textContent = "";
                selectedTimeSpan.textContent = "";
                selectedHoursSpan.textContent = "";
                selectedPriceSpan.textContent = "";
                
                updateDateButton();  // Update the button state after clearing
                renderBookingTable();  // Render the booking table again
            });
            return;
        }

        const totalPrice = hours * servicePrice;

        selectedDateSpan.textContent = formattedDate;
        selectedTimeSpan.textContent = `${startTime} - ${endTime}`;
        selectedHoursSpan.textContent = hours;
        selectedPriceSpan.textContent = ` ${totalPrice} ‡∏ö‡∏≤‡∏ó`;
    }

    clearButton.addEventListener("click", function () {
        selectedDate = new Date();
        startTimeSelect.value = "";
        endTimeSelect.value = "";
        selectedDateSpan.textContent = "";
        selectedTimeSpan.textContent = "";
        selectedHoursSpan.textContent = "";
        selectedPriceSpan.textContent = "";
        updateDateButton();
        renderBookingTable();
    });

    submitButton.addEventListener('click', function () {
        const startTime = startTimeSelect.value;
        let endTime = endTimeSelect.value;
    
        const selectedDateFromCalendar = currentDateButton._flatpickr.selectedDates[0];
    
        if (!selectedDateFromCalendar) {
            Swal.fire({
                icon: 'error',
                title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
                text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÑ‡∏î‡πâ',
                confirmButtonColor: '#d33'
            });
            return;
        }
    
        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏™‡∏≤‡∏£‡πå ‡∏ó‡∏µ‡πà 01 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå 2025"
        function formatThaiDate(date) {
            const thaiDays = ['‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå', '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå', '‡πÄ‡∏™‡∏≤‡∏£‡πå'];
            const thaiMonths = [
                '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
                '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
            ];
    
            const day = thaiDays[date.getDay()];
            const dateNumber = date.getDate().toString().padStart(2, '0'); // ‡πÄ‡∏û‡∏¥‡πà‡∏° 0 ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
            const month = thaiMonths[date.getMonth()];
            const year = date.getFullYear() + 543; // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
        
            return `${day} ‡∏ó‡∏µ‡πà ${dateNumber} ${month} ${year}`;
        }
    
        // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏™‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        const formattedDateThai = formatThaiDate(selectedDateFromCalendar); // "‡πÄ‡∏™‡∏≤‡∏£‡πå ‡∏ó‡∏µ‡πà 01 ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå 2025"
        const formattedDateISO = selectedDateFromCalendar.toLocaleDateString("sv-SE"); // ‚úÖ ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ YYYY-MM-DD ‡∏ï‡∏£‡∏á‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á


            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const selectedDate = new Date(selectedDateFromCalendar);
    selectedDate.setHours(0, 0, 0, 0);

    const now = new Date();
    const selectedStartTime = new Date(selectedDateFromCalendar);
    const [startHour, startMinute] = startTime.split(":").map(Number);
    selectedStartTime.setHours(startHour, startMinute, 0, 0);

    if (selectedDate.getTime() === today.getTime() && selectedStartTime <= now) {
        Swal.fire({
            icon: 'error',
            title: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÑ‡∏î‡πâ!',
            text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô',
            confirmButtonColor: '#d33'
        });
        return;
    }
    
        if (!startTime || !endTime) {
            Swal.fire({
                icon: 'warning',
                title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!',
                text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
                confirmButtonColor: '#f39c12'
            });
            return;
        }


    
        if (startTime >= endTime) {
            Swal.fire({
                icon: 'error',
                title: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
                text: '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',
                confirmButtonColor: '#d33'
            });
            return;
        }
    
        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const startTimeDate = new Date(`1970-01-01T${startTime}:00`);
        const endTimeDate = new Date(`1970-01-01T${endTime}:00`);
        const hours = (endTimeDate - startTimeDate) / (1000 * 60 * 60);
    
        if (!servicePrice || isNaN(servicePrice)) {
            Swal.fire({
                icon: 'error',
                title: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
                text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
                confirmButtonColor: '#d33'
            });
            return;
        }
    
        const totalPrice = hours * servicePrice;
    
        if (totalPrice <= 0) {
            Swal.fire({
                icon: 'error',
                title: '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
                text: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                confirmButtonColor: '#d33'
            });
            return;
        }


        // ‚úÖ ‡πÉ‡∏ä‡πâ SweetAlert2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        Swal.fire({
            title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
            html: `
                <strong>üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á:</strong> ${formattedDateThai}<br>
                <strong>‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á:</strong> ${startTime} ‡∏ô.  -  ${endTime} ‡∏ô.<br>
                <strong>üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</strong> ${totalPrice} ‡∏ö‡∏≤‡∏ó
            `,
            icon: 'info',
            showCancelButton: true,
            cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
            confirmButtonText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á',
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            reverseButtons: true
        }).then((result) => {
            if (result.isConfirmed) {
                // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"
                const bookingData = {
                    date: formattedDateISO, // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà PHP
                    startTime: startTime,
                    endTime: endTime,
                    totalPrice: totalPrice
                };
    
                console.log('üìå Booking Data ‡∏™‡πà‡∏á‡πÑ‡∏õ PHP:', bookingData);

                // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const today = new Date();
                today.setHours(0, 0, 0, 0); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

                if (selectedDate < today) {
                Swal.fire({
                icon: "error",
                title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡πÑ‡∏î‡πâ!",
                text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ",
                confirmButtonColor: "#d33",
            });
            return;
            }
                fetch('../php/save_booking.php', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(bookingData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                            text: '‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
                            confirmButtonColor: '#28a745'
                        }).then(() => {
                            window.location.href = '../Member/Booking history.php';
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
                            text: data.message,
                            confirmButtonColor: '#d33'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!',
                        text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
                        confirmButtonColor: '#d33'
                    });
                });
                
            }
        });
    });
    

    

    startTimeSelect.addEventListener("change", updateInfoBox);
    endTimeSelect.addEventListener("change", updateInfoBox);

    updateDateButton();
    renderBookingTable();
});
